"""
pywps process example:

classify: Classify satellite image
"""
# Author:	Stepan Kafka
# Rewritten by: Jachym Cepicky
# Lince: 
# 
# Web Processing Service implementation
# Copyright (C) 2006 Stepan Kafka
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

import os,time,string,sys
from pywps.Wps.process import GRASSWPSProcess

class Process(GRASSWPSProcess):
#####################################################################
#
# Configuration part of the process
#
#####################################################################
    def __init__(self):
        GRASSWPSProcess.__init__(self,
                Identifier = "classify",
                processVersion = "0.1",
                Title = "Image classification",
                Abstract = "Unsupervised image classification",
                storeSupported = True,
                statusSupported = True
                )

        self.AddComplexInput(Identifier="input",
                Title="Input raster map",
                Formats = ["image/tiff"])

        self.AddLiteralInput(Identifier="classes",
                Title = "Number of classes",
                Abstract = "Number of classes in unsupervised classification",
                value = 20)


        self.AddComplexValueReferenceOutput(Identifier = "output",
                Title="Resulting output map",
                Formats = ["image/tiff"])
        self.grassLocation="/"
    #####################################################################
    #
    # Execute part of the process
    #
    #####################################################################
    def execute(self):
        """
        This function
            1) Imports the raster map
            2) runs r.mapcalc out=in+value
            3) Exports the raster map
            4) returns the new file name or 'None' if something went wrong
        """
        
        self.GCmd("r.in.gdal -o -k input=%s output=input 1>&2" % (self.DataInputs['input']))
        self.GCmd("g.region -p rast=input.1")
        self.GCmd("i.group group=gr subgroup=klas input=`g.mlist type=rast sep=',' pattern='input.*'`")
        self.GCmd("i.cluster group=gr subgroup=klas sigfile=sig classes=%s" % (self.DataInputs['classes']))
        self.GCmd("i.maxlik -q group=gr subgroup=klas sigfile=sig class=classif reject=rejected")
        self.GCmd("r.out.gdal input=classif output=output.tif type=Byte")
        
        # check the resulting file or any other variable, which interrests you
        if "output.tif" in os.listdir(os.curdir):
            self.SetOutputValue('output', "output.tif")
            return
        else:
            return "Output file not created"
        
