"""
pywps process example:

addvalue: Adds some value to raster map
"""
# Author:	Jachym Cepicky
#        	http://les-ejk.cz
# Lince: 
# 
# Web Processing Service implementation
# Copyright (C) 2006 Jachym Cepicky
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

import os,time,string,sys,shutil

from pywps.Wps.process import GRASSWPSProcess

class Process(GRASSWPSProcess):
#####################################################################
#
# Configuration part of the process
#
#####################################################################
    def __init__(self):
        GRASSWPSProcess.__init__(self,
                Identifier = "addvalue",
                Title= "Add some value to some raster map",
                processVersion = "0.2",
                storeSupported = True,
                statusSupported = True)

        self.AddComplexInput(Identifier = "input",
                            Title = "Input raster map",
                            Formats= ["image/tiff"])
                             
        self.AddLiteralInput(Identifier = "value",
                            Title = "Value to be added",
                            value = ["*"],
                            type = type(0.0),
                            )
                
        self.AddComplexValueReferenceOutput(Identifier = "outputRef",
                            Title = "Resulting output map",
                            Formats = ["image/tiff"]
                            )

    #####################################################################
    #
    # Execute part of the process
    #
    #####################################################################
    def execute(self):
        """
        This function
            1) Imports the raster map
            2) runs r.mapcalc out=in+value
            3) Exports the raster map
            4) returns the new file name or 'None' if something went wrong
        """

        # import of the data
        self.GCmd("r.in.gdal -o input=%s output=input" %\
                (self.GetInputValue('input')))

        self.SetStatus(message="Data  imported", percent=10)

        # compositing 3 bands to one raster file
        for line in self.Cmd("gdalinfo %s" %\
                (self.GetInputValue('input'))):
            if line.split()[0] == "Band" and line.split()[1] == "3":
                self.GCmd("""g.region rast=input.red""")
                self.GCmd("r.composite r=input.red b=input.blue g=input.green out=input")

        # region setting
        self.GCmd("""g.region rast=input""")
        for l in os.popen("r.info input").readlines():
            sys.stderr.write(l+"\n")

        # adding the value
        self.GCmd("r.mapcalc output=input+%f >&2" % \
                (float(self.GetInputValue('value'))))

        for l in os.popen("r.info output").readlines():
            sys.stderr.write(l+"\n")

        self.GCmd("r.out.gdal in=output out=/tmp/pokus.png type=Byte")
        # output
        self.SetStatus("Raster file export", 90)
        self.GCmd("r.out.gdal type=UInt32 in=output out=%s" %\
                "output.tif")

        # setting output values
        if "output.tif" in os.listdir(os.curdir):
            self.SetOutputValue("outputRef","output.tif")
            return 
        else:
            return "Output file not created!"
