"""
pywps process example:

classify: Classify satellite image
"""
# Author:	Stepan Kafka
# Rewritten by: Jachym Cepicky
# Lince: 
# 
# Web Processing Service implementation
# Copyright (C) 2006 Jachym Cepicky
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

import os,time,string,sys

from pywps.Wps.process import GRASSWPSProcess

class Process(GRASSWPSProcess):
    #####################################################################
    #
    # Configuration part of the process
    #
    #####################################################################
    def __init__(self):
        GRASSWPSProcess.__init__(self,
                    Identifier = "visibility",
                    processVersion = "0.2",
                    Title="Visibility analysis",
                    Abstract="GRASS processed line of sight analysis.",
                    grassLocation="/var/www/wps/spearfish60/",
                    storeSupported = "true",
                    statusSupported = "true",
                    )

        self.AddLiteralInput(Identifier = "x",
                            Title = "x coordinate",
                            type = type(0.0)
                            )
        self.AddLiteralInput(Identifier = "y",
                            Title = "y coordinate",
                            type = type(0.0)
                            )
        self.AddLiteralInput(Identifier = "maxdist",
                            Title = "Maximal distance",
		            Abstract = 'Maximal distance of visibility (meters)',
                            type = type(0.0)
                            )
        self.AddLiteralInput(Identifier = "observer",
                            type = type(0.0),
                            Title = 'Observer elevation',
                            Abstract = 'The height of observer eye over the terrain (meters)',
                            )
        
        self.AddComplexReferenceOutput(Identifier = "output",
                Title =   'Resulting output map',
                Formats = ["image/tiff"],)
        
    #####################################################################
    #
    # Execute part of the process
    #
    #####################################################################
    def execute(self):
        
        self.GCmd("g.region -d")
        dist = float(self.GetInputValue("maxdist"))
        if dist > 20000:
            return "Visibility Error: maximal distance 2000 exceeded (%s)" % dist
        xmin=float (self.GetInputValue("x")) - dist
        ymin=float (self.GetInputValue('y')) - dist
        xmax=float (self.GetInputValue('x')) + dist
        ymax=float (self.GetInputValue('y')) + dist
        self.GCmd("g.region w=%i s=%i e=%i n=%i align=elevation.dem" % (xmin,ymin,xmax,ymax))
	self.SetStatus("Calculating visibility", 10)
        self.GCmd("r.los input=elevation.dem output=output coordinate=%s,%s max_dist=%i obs_elev=%s" % \
                (self.GetInputValue("x"),self.GetInputValue("y"),dist, self.GetInputValue('observer')))
	self.SetStatus("Creating output",50)
        self.GCmd("""r.mapcalc "output0=if(output,1,0)" """)
        self.GCmd("r.out.gdal input=output0 output=output.tif type=Byte")

        # check the resulting file or any other variable, which interrests you
        if "output.tif" in os.listdir(os.curdir):
            self.Outputs[0]['value'] = "output.tif"
            return
        else:
            return "Output file not created"
