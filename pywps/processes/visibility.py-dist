"""
pywps process example:

visibility: Visibility analysis
"""
# Author : Jachym Cepicky
# Lince: 
# 
# Web Processing Service implementation
# Copyright (C) 2006 Jachym Cepicky
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

import os,time,string,sys

from pywps.Wps.process import GRASSWPSProcess

class Process(GRASSWPSProcess):
    #####################################################################
    #
    # Configuration part of the process
    #
    #####################################################################
    def __init__(self):
        GRASSWPSProcess.__init__(self,
                    Identifier = "visibility",
                    processVersion = "0.3",
                    Title="Visibility analysis",
                    Abstract="""GRASS visibility (Lines of Sight) analysis.
                    The analysis is performed on raster digital elevation
                    model, which is downloaded via Web Coveradge Service or
                    similar.""",
                    storeSupported = "true",
                    statusSupported = "true")

        self.AddLiteralInput(Identifier = "lon",
                            Title = "Longitude",
                            Abstract = "X coordinate of the observer",
                            type = type(0.0))

        self.AddLiteralInput(Identifier = "lat",
                            Title = "Latitude",
                            Abstract = "Y coordinate of the observer",
                            type = type(0.0))

        self.AddComplexInput(Identifier = "dem",
                            Title = 'Digital elevation model',
                            Abstract = 'URL (e.g. WCS) of digital elevation model')

        self.AddLiteralInput(Identifier = "observer",
                            type = type(0.0),
                            Title = 'Observer height above the DTM',
                            Abstract = 'The height of observer eye over the terrain (meters)',
                            value = 1.8)

        self.AddLiteralInput(Identifier = "format",
                            type = type(0.0),
                            Title = 'Required format',
                            Abstract = 'Required output format',
                            allowedvalues = ("image/tiff","image/png"),
                            value = "image/tiff")
        
        self.AddComplexReferenceOutput(Identifier = "visibility",
                Title =   'Resulting output visibility map',
                Formats = ["image/tiff","image/png"])
        
    #
    # Execute part of the process
    #
    def execute(self):

	self.SetStatus("Importing data", 10)
        self.GCmd("r.in.gdal in=%s out=dem" % (self.GetInputValue("dem"))
        self.GCmd("g.region rast=dem")
	self.SetStatus("Calculating visibility", 30)
        self.GCmd("r.los input=dem output=output coordinate=%s,%s obs_elev=%s" % \
                (self.GetInputValue("lon"),self.GetInputValue("lat"), self.GetInputValue('observer')))
	self.SetStatus("Creating output",70)
        self.GCmd("""r.mapcalc "output0=if(output,1,0)" """)
	self.SetStatus("Exporting output",90)
        if self.GetInputValue("format") == "image/tiff":
            self.GCmd("r.out.gdal input=output0 output=visibility.tif type=Byte")
            self.SetOutputValue("visibility","visibility.tif")
        elif self.GetInputValue("format") == "image/png":
            self.GCmd("r.out.gdal input=output0 output=visibility.png type=Byte")
            self.SetOutputValue("visibility","visibility.tif")
        return
